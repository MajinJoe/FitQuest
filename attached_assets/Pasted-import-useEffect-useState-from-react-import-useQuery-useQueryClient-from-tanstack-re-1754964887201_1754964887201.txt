import { useEffect, useState } from "react";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { Mountain, CheckCircle, Clock, Target } from "lucide-react";
import type { Quest } from "@shared/schema";
import { QuestManager } from "@/lib/questService";

interface ActiveQuestsProps {
  quests?: Quest[];
}

export default function ActiveQuests({ quests: propQuests }: ActiveQuestsProps) {
  const [completedQuests, setCompletedQuests] = useState<number[]>([]);
  const queryClient = useQueryClient();

  // Fetch active quests if not provided via props
  const { data: fetchedQuests, isLoading } = useQuery<Quest[]>({
    queryKey: ['/api/quests/active'],
    enabled: !propQuests,
    refetchInterval: 30000, // Refetch every 30 seconds for real-time updates
    staleTime: 10000, // Consider data stale after 10 seconds
  });

  const quests = propQuests || fetchedQuests || [];

  // Listen for quest completion events
  useEffect(() => {
    const handleQuestCompleted = (event: CustomEvent) => {
      const { questId, xpReward } = event.detail;
      setCompletedQuests(prev => [...prev, questId]);
      
      // Remove from completed list after animation
      setTimeout(() => {
        setCompletedQuests(prev => prev.filter(id => id !== questId));
        queryClient.invalidateQueries({ queryKey: ['/api/quests/active'] });
      }, 3000);
    };

    window.addEventListener('questCompleted', handleQuestCompleted as EventListener);
    
    return () => {
      window.removeEventListener('questCompleted', handleQuestCompleted as EventListener);
    };
  }, [queryClient]);

  const getQuestTypeIcon = (type: string) => {
    switch (type) {
      case 'cardio':
        return '🏃‍♂️';
      case 'nutrition':
        return '🍎';
      case 'hydration':
        return '💧';
      case 'strength':
        return '💪';
      default:
        return '⚔️';
    }
  };

  const getQuestGradient = (type: string, completed: boolean = false) => {
    if (completed) {
      return 'bg-gradient-to-r from-fantasy-gold to-yellow-600';
    }
    
    switch (type) {
      case 'cardio':
        return 'bg-gradient-to-r from-fantasy-purple to-purple-800';
      case 'nutrition':
        return 'bg-gradient-to-r from-fantasy-green to-green-700';
      case 'hydration':
        return 'bg-gradient-to-r from-fantasy-blue to-blue-700';
      case 'strength':
        return 'bg-gradient-to-r from-fantasy-red to-red-700';
      default:
        return 'bg-gradient-to-r from-gray-600 to-gray-800';
    }
  };

  const getBorderColor = (type: string, completed: boolean = false) => {
    if (completed) {
      return 'border-fantasy-gold shadow-lg shadow-fantasy-gold/50';
    }
    
    switch (type) {
      case 'cardio':
        return 'border-purple-400';
      case 'nutrition':
        return 'border-green-400';
      case 'hydration':
        return 'border-blue-400';
      case 'strength':
        return 'border-red-400';
      default:
        return 'border-gray-400';
    }
  };

  const getProgressPercentage = (quest: Quest) => {
    return Math.min((quest.currentProgress / quest.targetValue) * 100, 100);
  };

  const getProgressText = (quest: Quest) => {
    const isCompleted = quest.currentProgress >= quest.targetValue;
    
    switch (quest.type) {
      case 'hydration':
        return `${Math.min(quest.currentProgress, quest.targetValue)}/${quest.targetValue} glasses ${isCompleted ? '✅' : ''}`;
      case 'cardio':
        return `${Math.min(quest.currentProgress, quest.targetValue)}/${quest.targetValue} min ${isCompleted ? '✅' : ''}`;
      case 'nutrition':
        return `${Math.min(quest.currentProgress, quest.targetValue)}/${quest.targetValue}g protein ${isCompleted ? '✅' : ''}`;
      case 'strength':
        return `${Math.min(quest.currentProgress, quest.targetValue)}/${quest.targetValue} workouts ${isCompleted ? '✅' : ''}`;
      default:
        return `${Math.min(quest.currentProgress, quest.targetValue)}/${quest.targetValue} ${isCompleted ? '✅' : ''}`;
    }
  };

  const isQuestCompleted = (quest: Quest) => {
    return quest.currentProgress >= quest.targetValue || completedQuests.includes(quest.id);
  };

  const getTimeRemaining = (quest: Quest) => {
    const now = new Date();
    const deadline = new Date(quest.deadline);
    const hoursRemaining = Math.ceil((deadline.getTime() - now.getTime()) / (1000 * 60 * 60));
    
    if (hoursRemaining <= 0) return 'Expired';
    if (hoursRemaining <= 24) return `${hoursRemaining}h left`;
    const daysRemaining = Math.ceil(hoursRemaining / 24);
    return `${daysRemaining}d left`;
  };

  if (isLoading && !propQuests) {
    return (
      <section className="mb-6 px-4">
        <div className="rpg-card p-4 mb-4">
          <h2 className="rpg-title text-xl flex items-center justify-center">
            <Mountain className="text-fantasy-purple mr-3" size={24} />
            Active Dungeons
          </h2>
        </div>
        
        <div className="space-y-4">
          {[...Array(3)].map((_, i) => (
            <div key={i} className="rpg-card p-4 animate-pulse">
              <div className="h-6 bg-parchment/30 rounded mb-2"></div>
              <div className="h-4 bg-parchment/20 rounded mb-3"></div>
              <div className="h-3 bg-wood-brown rounded"></div>
            </div>
          ))}
        </div>
      </section>
    );
  }

  return (
    <section className="mb-6 px-4">
      <div className="rpg-card p-4 mb-4">
        <h2 className="rpg-title text-xl flex items-center justify-center">
          <Mountain className="text-fantasy-purple mr-3" size={24} />
          Active Dungeons
        </h2>
      </div>
      
      <div className="space-y-4">
        {quests.length === 0 ? (
          <div className="rpg-card p-8 text-center">
            <Target className="w-12 h-12 mx-auto mb-4 text-fantasy-blue/50" />
            <p className="rpg-text text-lg mb-2">No active quests</p>
            <p className="rpg-text text-sm opacity-70">Complete daily activities to unlock new dungeons!</p>
          </div>
        ) : (
          quests.map((quest) => {
            const completed = isQuestCompleted(quest);
            const progressPercentage = getProgressPercentage(quest);
            
            return (
              <div 
                key={quest.id} 
                className={`rpg-card p-4 transition-all duration-500 ${
                  completed ? 'animate-pulse bg-fantasy-gold/10 border-fantasy-gold shadow-lg' : ''
                }`}
              >
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center gap-3">
                    <span className="text-2xl">{getQuestTypeIcon(quest.type)}</span>
                    <div>
                      <h3 className="rpg-title text-lg flex items-center gap-2">
                        {quest.name}
                        {completed && <CheckCircle className="w-5 h-5 text-fantasy-gold" />}
                      </h3>
                      <div className="flex items-center gap-2 text-xs rpg-text opacity-70">
                        <Clock className="w-3 h-3" />
                        <span>{getTimeRemaining(quest)}</span>
                      </div>
                    </div>
                  </div>
                  <span className={`px-3 py-1 rounded pixel-border font-bold text-sm ${
                    completed 
                      ? 'bg-fantasy-gold text-wood-dark animate-bounce' 
                      : 'bg-fantasy-gold/80 text-wood-dark'
                  }`}>
                    +{quest.xpReward} XP
                  </span>
                </div>
                
                <p className="rpg-text text-sm mb-4 opacity-90">{quest.description}</p>
                
                <div className="flex justify-between items-center">
                  <div className="flex-1 mr-4">
                    <div className="bg-wood-brown rounded-full h-4 overflow-hidden pixel-border relative">
                      <div 
                        className={`h-full rounded-full transition-all duration-700 ease-out ${
                          completed 
                            ? 'bg-gradient-to-r from-fantasy-gold to-yellow-400' 
                            : getQuestGradient(quest.type).replace('bg-gradient-to-r', 'bg-gradient-to-r')
                        }`}
                        style={{ width: `${progressPercentage}%` }}
                      ></div>
                      
                      {/* Progress shine effect */}
                      {progressPercentage > 10 && (
                        <div 
                          className="absolute top-0 h-full w-8 bg-gradient-to-r from-transparent via-white/30 to-transparent animate-shimmer"
                          style={{ left: `${Math.max(0, progressPercentage - 20)}%` }}
                        ></div>
                      )}
                    </div>
                  </div>
                  
                  <span className={`rpg-text text-sm font-bold ${
                    completed ? 'text-fantasy-gold' : ''
                  }`}>
                    {getProgressText(quest)}
                  </span>
                </div>
                
                {completed && (
                  <div className="mt-3 text-center">
                    <span className="bg-fantasy-gold text-wood-dark px-4 py-2 rounded-full font-bold text-sm animate-pulse">
                      🎉 Quest Completed! 🎉
                    </span>
                  </div>
                )}
              </div>
            );
          })
        )}
      </div>
    </section>
  );
}