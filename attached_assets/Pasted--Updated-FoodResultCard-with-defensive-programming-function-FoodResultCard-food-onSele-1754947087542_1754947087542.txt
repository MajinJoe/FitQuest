// Updated FoodResultCard with defensive programming
function FoodResultCard({ 
  food, 
  onSelect, 
  isFromExternalSource = false,
  sourceType = "Local"
}: { 
  food: any; 
  onSelect: (food: any) => void;
  isFromExternalSource?: boolean;
  sourceType?: string;
}) {
  // Defensive check - don't render if essential data is missing
  if (!food || !food.name || food.name.trim().length === 0) {
    console.warn('Skipping food item with missing name:', food);
    return null;
  }

  // Ensure nutrition values are numbers and not negative
  const safeCalories = Math.max(0, parseInt(food.calories) || 0);
  const safeProtein = Math.max(0, parseInt(food.protein) || 0);
  const safeCarbs = Math.max(0, parseInt(food.carbs) || 0);
  const safeFat = Math.max(0, parseInt(food.fat) || 0);
  const safeFiber = food.fiber ? Math.max(0, parseInt(food.fiber) || 0) : null;
  const safeSugar = food.sugar ? Math.max(0, parseInt(food.sugar) || 0) : null;
  const safeSodium = food.sodium ? Math.max(0, parseInt(food.sodium) || 0) : null;

  return (
    <Card className="hover:bg-gray-50 cursor-pointer transition-colors" onClick={() => onSelect(food)}>
      <CardContent className="p-4">
        <div className="flex justify-between items-start mb-2">
          <div className="flex-1">
            <h3 className="font-semibold text-gray-900">{food.name.trim()}</h3>
            {food.brand && food.brand.trim() && (
              <p className="text-sm text-gray-600 font-medium">{food.brand.trim()}</p>
            )}
            <p className="text-xs text-gray-500">
              {food.servingSize && food.servingSize.trim() ? food.servingSize.trim() : "100g"}
            </p>
          </div>
          <div className="flex items-center gap-2">
            {isFromExternalSource && (
              <Badge variant="default" className="text-xs">
                <Globe className="w-3 h-3 mr-1" />
                {sourceType}
              </Badge>
            )}
            {food.verified && (
              <Badge variant="secondary" className="text-xs">
                <Check className="w-3 h-3 mr-1" />
                Verified
              </Badge>
            )}
            <Badge variant="outline" className="text-xs capitalize">
              {food.category || "food"}
            </Badge>
          </div>
        </div>
        
        <div className="grid grid-cols-4 gap-4 text-sm">
          <div className="text-center">
            <p className="font-semibold text-orange-600">{safeCalories}</p>
            <p className="text-xs text-gray-500">calories</p>
          </div>
          <div className="text-center">
            <p className="font-semibold text-blue-600">{safeProtein}g</p>
            <p className="text-xs text-gray-500">protein</p>
          </div>
          <div className="text-center">
            <p className="font-semibold text-yellow-600">{safeCarbs}g</p>
            <p className="text-xs text-gray-500">carbs</p>
          </div>
          <div className="text-center">
            <p className="font-semibold text-purple-600">{safeFat}g</p>
            <p className="text-xs text-gray-500">fat</p>
          </div>
        </div>
        
        {(safeFiber || safeSugar || safeSodium) && (
          <div className="mt-3 pt-3 border-t border-gray-100">
            <div className="flex gap-4 text-xs text-gray-600">
              {safeFiber ? <span>Fiber: {safeFiber}g</span> : null}
              {safeSugar ? <span>Sugar: {safeSugar}g</span> : null}
              {safeSodium ? <span>Sodium: {safeSodium}mg</span> : null}
            </div>
          </div>
        )}

        {isFromExternalSource && food.ingredients && food.ingredients.trim() && (
          <div className="mt-2 pt-2 border-t border-gray-100">
            <p className="text-xs text-gray-600 line-clamp-2">
              <span className="font-medium">Ingredients:</span> {food.ingredients.trim()}
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
}